{"version":3,"sources":["components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","Array","isArray","list","headers","key","push","useEffect","undefined","sortBy","setSort","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","search","setSearch","_useState5","_useState6","page","setPage","filteredList","filter","item","values","join","toLowerCase","indexOf","react_default","a","createElement","className","type","value","placeholder","onChange","e","target","map","header","index","onClick","sort","b","isNaN","localeCompare","paginate","i","j","title","disabled","length","App","state","data","_this2","this","axios","get","then","res","setState","components_Table","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5eb6fe7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./table.scss\";\r\n\r\nfunction Table(props) {\r\n  // render nothing if not given an array\r\n  if (!Array.isArray(props.list)) {\r\n    return null;\r\n  }\r\n\r\n  // get table headers from first object in array\r\n  const headers = [];\r\n  \r\n  for (let key in props.list[0]) {\r\n    if (typeof props.list[0][key] !== \"object\") {\r\n      headers.push(key);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // make sure a default sort has been selected\r\n    if (sortBy === undefined) {\r\n      setSort(headers[0]);\r\n    }\r\n  });\r\n\r\n  // state\r\n  const [sortBy, setSort] = useState(headers[0]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [page, setPage] = useState(0);\r\n\r\n  function handleOnChange(e) {\r\n    setSearch(e.target.value);\r\n    setPage(0);\r\n  }\r\n\r\n  function filteredList() {\r\n    return props.list.filter((item) => {\r\n      // merge data together, then see if user input is anywhere inside\r\n      let values = Object.values(item).join(\"\").toLowerCase();\r\n      return values.indexOf(search.toLowerCase()) !== -1;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      {\r\n        // hide search bar\r\n        props.search === false || props.search === null ? null : \r\n        <input \r\n          className=\"search\" \r\n          type=\"search\" \r\n          value={search} \r\n          placeholder=\"🔍 Search\"\r\n          onChange={handleOnChange} \r\n        />\r\n      }\r\n\r\n      <div className=\"header\">\r\n        {\r\n          headers.map((header, index) => {\r\n            // convert headers into clickable labels\r\n            return (\r\n              <div className=\"col\" key={index} onClick={() => setSort(header)}>\r\n                {header}\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n      \r\n      {\r\n        filteredList()\r\n        .sort((a, b) => {\r\n          // account for missing values\r\n          if (a[sortBy] === undefined) {\r\n            return 1;\r\n          }\r\n          else if (b[sortBy] === undefined) {\r\n            return -1;\r\n          }\r\n          // sort alphabetically\r\n          else if (isNaN(a[sortBy])) {\r\n            return a[sortBy].localeCompare(b[sortBy]);\r\n          }\r\n          // numerically\r\n          else {\r\n            return a[sortBy] - b[sortBy];\r\n          }\r\n        })\r\n        .filter((item, index) => {\r\n          // keep all\r\n          if (isNaN(props.paginate)) return true;\r\n\r\n          // capture within range of pagination\r\n          return index < page + props.paginate && index >= page;\r\n        }).map((item, i) => {\r\n          // convert results into table rows\r\n          return (\r\n            <div key={i} className=\"row\">\r\n              {\r\n                headers.map((header, j) => {\r\n                  // make sure headers align correctly with row data\r\n                  return (\r\n                    <div className=\"col\" key={j}>\r\n                      <span className=\"label\">{header}</span>\r\n                      <span className=\"text\" title={item[header]}>{item[header]}</span>\r\n                    </div>\r\n                  );\r\n                })\r\n              }\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n\r\n      {\r\n        // hide page buttons\r\n        isNaN(props.paginate) ? null : \r\n        <div className=\"nav\">\r\n          <button \r\n            className=\"btn\"\r\n            disabled={page === 0} \r\n            onClick={() => setPage(page-props.paginate)}\r\n          >👈🏽</button>\r\n          \r\n          <button \r\n            className=\"btn\"\r\n            disabled={page + props.paginate >= filteredList().length} \r\n            onClick={() => setPage(page+props.paginate)}\r\n          >👉🏽</button>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport \"./app.scss\";\nimport Table from \"./components/Table.js\";\n\nclass App extends Component {\n  state = {\n    data: []\n  };\n\n  componentDidMount() {\n    // call api\n    axios.get(\"https://jsonplaceholder.typicode.com/users\").then((res) => {\n      this.setState({\n        data: res.data\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React Table Example</h1>\n        <Table list={this.state.data} paginate={5} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}